name: Test Matrix

on:
    schedule:
        - cron: "0 6 * * 1" # Weekly on Monday
    workflow_dispatch:
    push:
        branches: [main]
        paths:
            - "apps/backend/**"
            - "apps/frontend/**"
            - "pyproject.toml"
            - "requirements*.txt"

env:
    DJANGO_SETTINGS_MODULE: config.settings.test

jobs:
    test-matrix:
        name: Test Matrix
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                python-version: ["3.11", "3.12"]
                node-version: ["18", "20"]
                exclude:
                    # Reduce matrix size for cost optimization
                    - os: windows-latest
                      python-version: "3.12"
                    - os: macos-latest
                      python-version: "3.12"

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "npm"
                  cache-dependency-path: apps/frontend/package-lock.json

            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Create virtual environment
              run: uv venv

            - name: Install Python dependencies
              run: uv pip install --python .venv/bin/python -e .

            - name: Install frontend dependencies
              working-directory: apps/frontend
              run: npm ci

            - name: Run backend tests
              working-directory: apps/backend
              run: |
                  source ../../.venv/bin/activate
                  python manage.py test apps.contact.tests -v 2
              shell: bash
              env:
                  SECRET_KEY: test-secret-key-for-matrix-testing

            - name: Run frontend tests
              working-directory: apps/frontend
              run: npm run test:run

            - name: Build frontend
              working-directory: apps/frontend
              run: npm run build

    performance-test:
        name: Performance Tests
        runs-on: ubuntu-latest
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: apps/frontend/package-lock.json

            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Install dependencies
              run: |
                  uv venv
                  uv pip install --python .venv/bin/python -e .

            - name: Install frontend dependencies
              working-directory: apps/frontend
              run: npm ci

            - name: Build production frontend
              working-directory: apps/frontend
              run: npm run build

            - name: Run Django performance tests
              working-directory: apps/backend
              run: |
                  source ../../.venv/bin/activate
                  python manage.py test --keepdb --parallel --debug-mode
              env:
                  DJANGO_SETTINGS_MODULE: config.settings.test
                  SECRET_KEY: test-secret-key-for-performance

            - name: Install Lighthouse CI
              run: npm install -g @lhci/cli

            - name: Run Lighthouse CI (if server available)
              run: |
                  # This would run against a deployed staging environment
                  echo "Lighthouse performance testing would run here"
                  # lhci collect --url=https://mysite-staging.railway.app
                  # lhci assert
              continue-on-error: true

    security-test:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Install dependencies
              run: |
                  uv venv
                  uv pip install --python .venv/bin/python -e .

            - name: Run Bandit security scan
              run: |
                  source .venv/bin/activate
                  bandit -r apps/backend/ -f json -o bandit-report.json
              continue-on-error: true

            - name: Run Safety check
              run: |
                  source .venv/bin/activate
                  safety check --json --output safety-report.json
              continue-on-error: true

            - name: Run Semgrep scan
              uses: returntocorp/semgrep-action@v1
              with:
                  config: auto
              continue-on-error: true

            - name: Upload security reports
              uses: actions/upload-artifact@v4
              with:
                  name: security-reports
                  path: |
                      bandit-report.json
                      safety-report.json
                  retention-days: 30
              if: always()
