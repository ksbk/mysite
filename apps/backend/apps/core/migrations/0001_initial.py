# Generated by Django 5.2.6 on 2025-10-02 20:12

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when this object was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this object was last updated.', verbose_name='Updated At')),
                ('_singleton_enforcer', models.BooleanField(db_index=True, default=True, editable=False, help_text='Ensures only one instance of this model can exist.', unique=True, verbose_name='Singleton enforcer')),
                ('maintenance_mode', models.BooleanField(default=False, help_text='Enable maintenance mode', verbose_name='Maintenance Mode')),
                ('maintenance_message', models.TextField(blank=True, default="We're currently performing maintenance. Please check back soon.", help_text='Message to display during maintenance', verbose_name='Maintenance Message')),
                ('comments_enabled', models.BooleanField(default=True, help_text='Enable comments site-wide', verbose_name='Comments Enabled')),
                ('registration_enabled', models.BooleanField(default=True, help_text='Allow new user registrations', verbose_name='Registration Enabled')),
                ('max_upload_size_mb', models.PositiveIntegerField(default=10, help_text='Maximum file upload size in megabytes', verbose_name='Max Upload Size (MB)')),
                ('allowed_file_extensions', models.JSONField(default=list, help_text='List of allowed file extensions for uploads', verbose_name='Allowed File Extensions')),
            ],
            options={
                'verbose_name': 'Content Configuration',
                'verbose_name_plural': 'Content Configuration',
            },
        ),
        migrations.CreateModel(
            name='SEOConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when this object was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this object was last updated.', verbose_name='Updated At')),
                ('_singleton_enforcer', models.BooleanField(db_index=True, default=True, editable=False, help_text='Ensures only one instance of this model can exist.', unique=True, verbose_name='Singleton enforcer')),
                ('meta_title', models.CharField(blank=True, help_text='Default meta title (max 60 characters)', max_length=60, verbose_name='Meta Title')),
                ('meta_description', models.CharField(blank=True, help_text='Default meta description (max 160 characters)', max_length=160, verbose_name='Meta Description')),
                ('meta_keywords', models.CharField(blank=True, help_text='Comma-separated meta keywords', max_length=255, verbose_name='Meta Keywords')),
                ('noindex', models.BooleanField(default=False, help_text='Prevent search engines from indexing the site', verbose_name='No Index')),
                ('canonical_url', models.URLField(blank=True, help_text='Canonical URL for the site', verbose_name='Canonical URL')),
                ('og_image', models.URLField(blank=True, help_text='Default Open Graph image URL', verbose_name='OG Image')),
                ('google_site_verification', models.CharField(blank=True, help_text='Google Search Console verification code', max_length=100, verbose_name='Google Site Verification')),
                ('google_analytics_id', models.CharField(blank=True, help_text='Google Analytics tracking ID', max_length=50, verbose_name='Google Analytics ID')),
                ('structured_data', models.JSONField(default=dict, help_text='Default structured data (JSON-LD)', verbose_name='Structured Data')),
            ],
            options={
                'verbose_name': 'SEO Configuration',
                'verbose_name_plural': 'SEO Configuration',
            },
        ),
        migrations.CreateModel(
            name='SiteConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when this object was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this object was last updated.', verbose_name='Updated At')),
                ('_singleton_enforcer', models.BooleanField(db_index=True, default=True, editable=False, help_text='Ensures only one instance of this model can exist.', unique=True, verbose_name='Singleton enforcer')),
                ('site_name', models.CharField(default='My Site', help_text='Display name used throughout the site', max_length=120, verbose_name='Site Name')),
                ('site_tagline', models.CharField(blank=True, help_text='Brief tagline or description shown in footers and meta tags', max_length=200, verbose_name='Site Tagline')),
                ('domain', models.CharField(blank=True, help_text='Primary domain for canonical URLs', max_length=255, verbose_name='Domain')),
                ('contact_email', models.EmailField(blank=True, help_text='Primary contact email address', max_length=254, verbose_name='Contact Email')),
                ('feature_flags', models.JSONField(default=dict, help_text='Feature flags for various site functionality', verbose_name='Feature Flags')),
                ('navigation', models.JSONField(default=list, help_text='Main navigation structure', verbose_name='Navigation')),
            ],
            options={
                'verbose_name': 'Site Configuration',
                'verbose_name_plural': 'Site Configuration',
            },
        ),
        migrations.CreateModel(
            name='ThemeConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The date and time when this object was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this object was last updated.', verbose_name='Updated At')),
                ('_singleton_enforcer', models.BooleanField(db_index=True, default=True, editable=False, help_text='Ensures only one instance of this model can exist.', unique=True, verbose_name='Singleton enforcer')),
                ('primary_color', models.CharField(default='#007bff', help_text='Primary brand color (hex format)', max_length=7, verbose_name='Primary Color')),
                ('secondary_color', models.CharField(default='#6c757d', help_text='Secondary brand color (hex format)', max_length=7, verbose_name='Secondary Color')),
                ('tritiary_color', models.CharField(default='#ffffff', help_text='Tritiary brand color (hex format)', max_length=7, verbose_name='Tritiary Color')),
                ('favicon_url', models.URLField(blank=True, help_text='URL to favicon file', verbose_name='Favicon URL')),
                ('logo_url', models.URLField(blank=True, help_text='URL to site logo', verbose_name='Logo URL')),
                ('custom_css', models.TextField(blank=True, help_text='Custom CSS to inject into pages', verbose_name='Custom CSS')),
                ('dark_mode_enabled', models.BooleanField(default=True, help_text='Enable dark mode support', verbose_name='Dark Mode Enabled')),
            ],
            options={
                'verbose_name': 'Theme Configuration',
                'verbose_name_plural': 'Theme Configuration',
            },
        ),
        migrations.CreateModel(
            name='ConfigAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('rollback', 'Rollback'), ('validate', 'Validate')], max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('change_reason', models.TextField(blank=True, help_text='Reason for the change')),
                ('old_value', models.JSONField(blank=True, help_text='Configuration state before the change', null=True)),
                ('new_value', models.JSONField(blank=True, help_text='Configuration state after the change', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('request_id', models.CharField(blank=True, help_text='Request ID for correlation with logs', max_length=50)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, help_text='User who made the change', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configuration Audit',
                'verbose_name_plural': 'Configuration Audits',
                'db_table': 'core_config_audit',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='core_config_content_b9cd6c_idx'), models.Index(fields=['user', 'timestamp'], name='core_config_user_id_4abaa8_idx'), models.Index(fields=['action', 'timestamp'], name='core_config_action_425297_idx'), models.Index(fields=['timestamp'], name='core_config_timesta_3a3afb_idx')],
            },
        ),
        migrations.CreateModel(
            name='ConfigVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('version_number', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('config_data', models.JSONField(help_text='Complete configuration state')),
                ('schema_version', models.CharField(default='1.0', help_text='Schema version for compatibility checking', max_length=20)),
                ('is_current', models.BooleanField(default=False)),
                ('change_summary', models.TextField(blank=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text="Tags for categorizing versions (e.g., 'stable', 'experimental')")),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configuration Version',
                'verbose_name_plural': 'Configuration Versions',
                'db_table': 'core_config_version',
                'ordering': ['-version_number'],
                'indexes': [models.Index(fields=['content_type', 'object_id', 'version_number'], name='core_config_content_06eb4d_idx'), models.Index(fields=['created_at'], name='core_config_created_8db7bd_idx'), models.Index(fields=['is_current'], name='core_config_is_curr_58ea62_idx')],
                'unique_together': {('content_type', 'object_id', 'version_number')},
            },
        ),
    ]
