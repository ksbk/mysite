"""
Context processors for core app functionality.
Provides stable SITE, NAV, and FEATURES data for templates.
"""

import secrets
import time
from typing import Any
from urllib.request import urlopen

from django.conf import settings
from django.http import HttpRequest

from .config import ConfigService

# Vite dev server availability check cache
_last_check = 0.0
_last_result = False


def _check_vite_available(url: str, ttl: float = 10.0) -> bool:
    """Check if Vite dev server is available with caching."""
    global _last_check, _last_result
    now = time.monotonic()

    if now - _last_check < ttl:
        return _last_result

    try:
        # Cheap probe for HMR client (URL controlled via settings)
        with urlopen(f"{url}/@vite/client", timeout=0.5):  # nosec B310
            _last_result = True
    except OSError:
        _last_result = False

    _last_check = now
    return _last_result


def site_context(request):
    """
    Context processor that provides stable SITE, NAV, and FEATURES shape.
    Uses the unified loader for consistency.
    """
    try:
        from apps.core.config.loader import resolve_config
        site = resolve_config(request)
        return {
            "SITE": site,
            "NAV": site["content"]["navigation"],
            "FEATURES": site.get("feature_flags", {})
        }
    except Exception:
        # Fallback configuration in case of errors
        return {
            "SITE": {
                "site": {
                    "site_name": "My Site",
                    "site_tagline": "",
                    "domain": "",
                    "contact_email": "",
                    "feature_flags": {},
                    "navigation": [],
                },
                "seo": {
                    "title": "My Site",
                    "description": "",
                    "keywords": [],
                    "canonical_url": "",
                    "og_image": "",
                },
                "theme": {
                    "primary_color": "#007bff",
                    "secondary_color": "#6c757d",
                    "font_family": "system-ui",
                },
                "content": {
                    "maintenance_message": "",
                    "allowed_file_extensions": [".jpg", ".jpeg", ".png", ".pdf"],
                    "max_file_size": 5242880,
                },
            },
            "NAV": [],
            "FEATURES": {},
        }


def vite(request: HttpRequest) -> dict[str, Any]:
    """Provide Vite development server information."""
    dev = bool(getattr(settings, "DEBUG", False))
    dev_url = getattr(settings, "VITE_DEV_SERVER_URL", "http://localhost:5173")
    available = _check_vite_available(dev_url) if dev else False

    return {
        "DEBUG": dev,
        "VITE_DEV": dev,
        "VITE_DEV_SERVER_URL": dev_url,
        "VITE_DEV_AVAILABLE": available,
    }


def security(request: HttpRequest) -> dict[str, Any]:
    """Provide security-related context including CSP nonce."""
    nonce = ""
    if getattr(settings, "CSP_NONCE_enabled", False):
        # Generate a new nonce for each request
        nonce = secrets.token_urlsafe(16)
        # Store in request for CSP middleware to use
        setattr(request, "csp_nonce", nonce)

    return {
        "CSP_NONCE": nonce,
    }

                _last_result = False

        # Extract feature flags    _last_check = now

        feature_flags = config_dict.get("site", {}).get("feature_flags", {})    return _last_result



        return {

            "SITE": config_dict,  # Complete nested configurationdef vite(request):

            "NAV": navigation,    # Direct access to navigation    dev = bool(getattr(settings, "DEBUG", False))

            "FEATURES": feature_flags,  # Direct access to feature flags    dev_url = getattr(settings, "VITE_DEV_SERVER_URL", "http://localhost:5173")

        }    available = _check_vite_available(dev_url) if dev else False

    except Exception:    return {

        # Fallback configuration in case of errors        "DEBUG": dev,

        return {        "debug": dev,

            "SITE": {        "VITE_DEV": dev,

                "site": {        "VITE_DEV_SERVER_URL": dev_url,

                    "site_name": "My Site",        "VITE_DEV_AVAILABLE": available,

                    "site_tagline": "",    }

                    "domain": "",

                    "contact_email": "",

                    "feature_flags": {},def _load_site_json() -> dict:

                    "navigation": [],    path = getattr(settings, "SITE_SETTINGS_JSON", None)

                },    if not path:

                "seo": {        return {}

                    "meta_title": "",    try:

                    "meta_description": "",        with open(path, encoding="utf-8") as f:

                    "noindex": False,            return json.load(f)

                    "canonical_url": "",    except Exception:

                    "og_image": "",        return {}

                },

                "theme": {

                    "primary_color": "#007bff",def site(request):

                    "secondary_color": "#6c757d",    """Provide site customization settings with JSON fallback and DB override."""

                    "dark_mode_enabled": True,    defaults = {

                },        "site_name": getattr(settings, "SITE_NAME", "MySite"),

                "content": {        "site_author": "MySite Team",

                    "maintenance_mode": False,        "meta_description": "MySite - A modern Django + Vite application",

                    "comments_enabled": True,        "meta_keywords": "django,vite,web development",

                    "registration_enabled": True,        "og_description": "MySite - A modern Django + Vite application",

                },        "og_image": "",

            },        "twitter_site": "",

            "NAV": [],        "canonical_url": "",

            "FEATURES": {},        "noindex": False,

        }        "hero_title": "Welcome to MySite",
        "hero_subtitle": "A modern Django + Vite application.",
        "theme_color_light": "#ffffff",
        "theme_color_dark": "#0b0f19",
        "mask_icon_color": "",
        "analytics_domain": "",
        "cdn_domain": "",
        "json_ld": "",
    }

    data = {**defaults, **_load_site_json()}
    try:
        s = SiteSettings.get_solo()
        if s.site_name:
            data["site_name"] = s.site_name
        if s.meta_description:
            data["meta_description"] = s.meta_description
        if s.meta_keywords:
            data["meta_keywords"] = s.meta_keywords
        if s.og_image:
            data["og_image"] = s.og_image
    except Exception:  # nosec B110 - acceptable during initial migrations
        # On initial deploy before migrations, silently ignore DB lookup.
        # Narrowing exception types would require importing ORM errors; we
        # document the behavior and suppress Bandit as this is a benign path.
        data = data

    return {"SITE": data}


def security(request):
    """Provide security-related context including CSP nonce."""
    nonce = ""
    if getattr(settings, "CSP_NONCE_ENABLED", False):
        # Generate a new nonce for each request
        nonce = secrets.token_urlsafe(16)
        # Store in request for CSP middleware to use
        request.csp_nonce = nonce

    return {
        "csp_nonce": nonce,
    }
