# docker-compose.dev.yml
# Local development for Django backend + Vite frontend.
# Usage:
#   docker compose -f docker-compose.dev.yml up --build
# Services will install deps on first run and hot-reload on code changes.

services:
  backend:
    image: python:3.12-slim
    working_dir: /workspace
    # Mount entire repo for live reload and code edits
    volumes:
      - .:/workspace:cached
      # Cache pip between runs to speed up installs
      - pip-cache:/root/.cache/pip
    env_file:
      - .env
    environment:
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUNBUFFERED: "1"
    # Install dev deps if needed, then run the dev server
    command: >-
      sh -lc "pip install --disable-pip-version-check -q -r requirements-dev.txt || pip install --disable-pip-version-check -q -r requirements.txt;
      python apps/backend/manage.py migrate;
      python apps/backend/manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    # Backend can start without frontend, but ordering helps on first boot
    depends_on:
      - frontend

  frontend:
    image: node:20-alpine
    working_dir: /workspace/apps/frontend
    volumes:
      - .:/workspace:cached
      - node-cache:/root/.npm
    environment:
      # Ensure Vite binds externally for the backend to reach it
      HOST: "0.0.0.0"
    command: >-
      sh -lc "npm ci --no-audit --no-fund; npm run dev -- --host --port 5173"
    ports:
      - "5173:5173"

  # postgres:
  #   image: postgres:16
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: django
  #     POSTGRES_PASSWORD: django
  #     POSTGRES_DB: mysite
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - pg-data:/var/lib/postgresql/data
  #
  # To use Postgres locally:
  # 1) Uncomment the service above
  # 2) Add/adjust DATABASE_URL in .env, e.g.:
  #    DATABASE_URL=postgresql://django:django@localhost:5432/mysite
  # 3) Add dependency: backend.depends_on: [frontend, postgres]

volumes:
  pip-cache:
  node-cache:
  # pg-data:
